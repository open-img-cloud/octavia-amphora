name: build_amphora

env:
  version: ${{ github.ref_name }}

  AMP_BASE_OS: ubuntu-minimal
  AMP_RELEASE: noble
  AMP_ARCH: amd64
  AMP_IMAGE_TYPE: qcow2
  AMP_SIZE_GB: "2"
  CLOUD_INIT_DATASOURCES: ConfigDrive

  OCTAVIA_REF: ""                 # branche/tag/SHA (ex: stable/2024.1) ‚Äî auto-d√©riv√© si vide
  PIN_WITH_DIB_REPOREF: "false"   # "true" => DIB_REPOREF_amphora_agent
  UPPER_CONSTRAINTS_URL: ""       # auto-d√©riv√© si vide

on:
  push:
    tags: ['*']
  workflow_dispatch:
    inputs:
      octavia_ref:
        description: "Branche/tag/SHA Octavia (ex: stable/2024.1)"
        required: false
        default: ""
      pin_with_dib_reporef:
        description: "Forcer DIB_REPOREF_amphora_agent (true/false)"
        required: false
        default: "false"
      base_os:
        description: "Base OS (ubuntu-minimal, rocky, ...)"
        required: false
        default: "ubuntu-minimal"
      release_id:
        description: "Release ID (ex: noble, 9-stream)"
        required: false
        default: "noble"
      upper_constraints_url:
        description: "URL upper-constraints.txt (optionnel)"
        required: false
        default: ""

jobs:
  build:
    runs-on: [self-hosted, Linux, kvm]
    container:
      image: ubuntu:24.04
      options: --privileged --volume /tmp:/shared

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Normalize inputs to env
        shell: bash
        run: |
          if [ -n "${{ github.event.inputs.octavia_ref }}" ]; then
            echo "OCTAVIA_REF=${{ github.event.inputs.octavia_ref }}" >> $GITHUB_ENV
          else
            echo "OCTAVIA_REF=${{ env.OCTAVIA_REF }}" >> $GITHUB_ENV
          fi

          if [ -n "${{ github.event.inputs.pin_with_dib_reporef }}" ]; then
            echo "PIN_WITH_DIB_REPOREF=${{ github.event.inputs.pin_with_dib_reporef }}" >> $GITHUB_ENV
          else
            echo "PIN_WITH_DIB_REPOREF=${{ env.PIN_WITH_DIB_REPOREF }}" >> $GITHUB_ENV
          fi

          if [ -n "${{ github.event.inputs.base_os }}" ]; then
            echo "AMP_BASE_OS=${{ github.event.inputs.base_os }}" >> $GITHUB_ENV
          else
            echo "AMP_BASE_OS=${{ env.AMP_BASE_OS }}" >> $GITHUB_ENV
          fi

          if [ -n "${{ github.event.inputs.release_id }}" ]; then
            echo "AMP_RELEASE=${{ github.event.inputs.release_id }}" >> $GITHUB_ENV
          else
            echo "AMP_RELEASE=${{ env.AMP_RELEASE }}" >> $GITHUB_ENV
          fi

          if [ -n "${{ github.event.inputs.upper_constraints_url }}" ]; then
            echo "UPPER_CONSTRAINTS_URL=${{ github.event.inputs.upper_constraints_url }}" >> $GITHUB_ENV
          else
            echo "UPPER_CONSTRAINTS_URL=${{ env.UPPER_CONSTRAINTS_URL }}" >> $GITHUB_ENV
          fi

      - name: Derive OCTAVIA_REF & upper-constraints if empty (from tag)
        shell: bash
        run: |
          # Si OCTAVIA_REF est vide, d√©duire "stable/MAJOR.MINOR" depuis le tag (version)
          if [ -z "${OCTAVIA_REF}" ]; then
            VMAJ="$(echo "${version}" | cut -d. -f1)"
            VMIN="$(echo "${version}" | cut -d. -f2)"
            if [ -n "$VMAJ" ] && [ -n "$VMIN" ]; then
              SERIES="stable/${VMAJ}.${VMIN}"
              echo "OCTAVIA_REF=$SERIES" >> $GITHUB_ENV
              echo "Derived OCTAVIA_REF=$SERIES from tag ${version}"
              # Si UPPER_CONSTRAINTS_URL est vide, d√©river celui de la m√™me s√©rie
              if [ -z "${UPPER_CONSTRAINTS_URL}" ]; then
                URL="https://opendev.org/openstack/requirements/raw/branch/${SERIES}/upper-constraints.txt"
                echo "UPPER_CONSTRAINTS_URL=$URL" >> $GITHUB_ENV
                echo "Derived UPPER_CONSTRAINTS_URL=$URL"
              fi
            else
              echo "WARN: Impossible de d√©river OCTAVIA_REF depuis ${version}"
            fi
          else
            echo "Using user-provided OCTAVIA_REF=${OCTAVIA_REF}"
          fi

      - name: Install build prerequisites
        run: |
          apt-get update
          DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
            qemu-utils git kpartx debootstrap python3-venv python3-pip ca-certificates jq curl xz-utils e2fsprogs sudo

      - name: Clone Octavia (diskimage-create.sh)
        run: |
          set -e
          git clone https://opendev.org/openstack/octavia.git
          cd octavia
          if [ -n "${OCTAVIA_REF}" ]; then
            git checkout "${OCTAVIA_REF}" || echo "Info: ${OCTAVIA_REF} n'est pas une branche/tag valide dans ce clone (ok si DIB_REPOREF est utilis√©)."
          fi

      - name: Python venv + requirements
        working-directory: octavia/diskimage-create
        run: |
          python3 -m venv .venv
          . .venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build Amphora image
        working-directory: octavia/diskimage-create
        env:
          CLOUD_INIT_DATASOURCES: ${{ env.CLOUD_INIT_DATASOURCES }}
          DIB_REPOLOCATION_upper_constraints: ${{ env.UPPER_CONSTRAINTS_URL }}
        shell: bash
        run: |
          set -euo pipefail
          . .venv/bin/activate
          chmod +x ./diskimage-create.sh

          REF="${OCTAVIA_REF}"
          USE_DIB_REPOREF="${PIN_WITH_DIB_REPOREF}"

          if [ -n "$REF" ] && [ "$USE_DIB_REPOREF" = "true" ]; then
            export DIB_REPOREF_amphora_agent="$REF"
          fi

          OUTPUT_BASENAME="amphora-${AMP_ARCH}-haproxy"
          OUTFILE="${OUTPUT_BASENAME}.${AMP_IMAGE_TYPE}"

          CMD=( ./diskimage-create.sh
                -i "${AMP_BASE_OS}"
                -d "${AMP_RELEASE}"
                -a "${AMP_ARCH}"
                -t "${AMP_IMAGE_TYPE}"
                -s "${AMP_SIZE_GB}"
                -o "${OUTPUT_BASENAME}" )

          if [ -n "$REF" ] && [ "$USE_DIB_REPOREF" != "true" ]; then
            CMD+=( -g "$REF" )
          fi

          echo ">>> ${CMD[*]}"
          "${CMD[@]}"

          REF_SAFE="${REF:-default}"
          REF_SAFE="${REF_SAFE//\//_}"
          FINAL="amphora-${AMP_ARCH}-haproxy-${REF_SAFE}-${version}.${AMP_IMAGE_TYPE}"
          mv "${OUTFILE}" "${FINAL}"

          {
            echo "# Octavia Amphora ${version} checksums"
            echo "# Ref=${REF_SAFE} BaseOS=${AMP_BASE_OS} Release=${AMP_RELEASE} Arch=${AMP_ARCH}"
            echo "# Constraints=${UPPER_CONSTRAINTS_URL:-none}"
            echo "# Generated: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"
            echo ""
            echo "## MD5";    md5sum "${FINAL}"
            echo "";           echo "## SHA1";   sha1sum "${FINAL}"
            echo "";           echo "## SHA256"; sha256sum "${FINAL}"
          } > checksums.txt

          cp "${FINAL}" /shared || true
          cp checksums.txt /shared || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: octavia-amphora-image
          path: |
            octavia/diskimage-create/amphora-*.${{ env.AMP_IMAGE_TYPE }}
            octavia/diskimage-create/checksums.txt

  deploy:
    needs: build
    runs-on: [self-hosted, Linux, kvm]
    container:
      image: ghcr.io/net-architect-cloud/docker-scp-gateway:latest
      options: --user root
    defaults:
      run:
        shell: bash
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Deploy to SFTP server
        # ‚ö†Ô∏è On garde ta conf SSH qui fonctionne (ne change rien ici)
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          printf '%s\n' "${{ secrets.SFTP_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

          KEY_PATH="/github/home/.ssh/deploy_key"
          SSH_OPTS="-i $KEY_PATH -p ${{ secrets.SFTP_PORT || 22 }} -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR"
          SSH_CMD="ssh $SSH_OPTS ${{ secrets.SFTP_USERNAME }}@${{ secrets.SFTP_HOST }}"
          REPO_NAME="${{ github.event.repository.name }}"
          REMOTE_PATH="public_html/repo.openimages.cloud/$REPO_NAME"

          echo "SSH connection test"
          $SSH_CMD "echo 'SSH OK'"

          $SSH_CMD "mkdir -p $REMOTE_PATH/${version}"
          rsync -avz -e "ssh $SSH_OPTS" \
            artifacts/ ${{ secrets.SFTP_USERNAME }}@${{ secrets.SFTP_HOST }}:$REMOTE_PATH/${version}/

          $SSH_CMD "rm -f $REMOTE_PATH/latest"
          $SSH_CMD "ln -sf ${version} $REMOTE_PATH/latest"

          echo "‚úÖ Deployment completed"
          echo "üåê URLs:"
          echo "  - Version ${version} : https://repo.openimages.cloud/$REPO_NAME/${version}/"
          echo "  - Latest version      : https://repo.openimages.cloud/$REPO_NAME/latest/"
